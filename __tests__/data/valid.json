{
    "SKU": "BE-JV-002",
    "interpreter": 1,
    "type": "MULT",
    "language": "java",
    "classification": [
        {
            "knowledgeArea": "Orientação a Objetos",
            "category": "Polimorfismo",
            "subCategory": ""
        }
    ],
    "level": "Basic",
    "tagsOrConcepts": [
        "programação orientada a objetos",
        "polimorfismo"
    ],
    "text": [
        "Em qual das situações abaixo é recomendado o uso de polimorfismo?"
    ],
    "alternatives": [
        {
            "text": "Quando queremos reescrever os comportamentos de um método sem o uso de herança.",
            "feedback": "Quando precisamos reformular o comportamento de um método para alguma classe, utilizamos o conceito de Override (sobrescrita) que exige o uso de herança.",
            "correct": false,
            "id": "dc72b639-8666-4124-860e-bf45af136c71"
        },
        {
            "text": "Somente quando queremos reduzir a repetição de código.",
            "feedback": "O recurso de herança e polimorfismo não são meramente para redução de código. Quando utilizamos esses recursos estamos dizendo que um objeto da subclasse também é um objeto da superclasse. Exemplo: Uma moto (subclasse) é um veículo (superclasse).",
            "correct": false,
            "id": "85d5c32e-2bf6-43b1-9aed-daab539506fe"
        },
        {
            "text": "Quando queremos garantir o controle de acesso aos membros de uma classe",
            "feedback": "O controle de acesso a membros das classes deve ser feito utilizando os modificadores de acesso: PUBLIC, PROTECTED e PRIVATE.",
            "correct": false,
            "id": "d195492f-0cc9-45e1-af77-8419fe0106ff"
        },
        {
            "text": "Quando diferentes classes estão relacionadas através de herança, mas precisam ter comportamentos únicos.",
            "feedback": "Correto!",
            "correct": true,
            "id": "3e3180e4-7be8-407e-b15d-a9c667ad11b3"
        }
    ],
    "id": "0491a527-7a7e-42cb-8ee2-4868941ab6a1"
}